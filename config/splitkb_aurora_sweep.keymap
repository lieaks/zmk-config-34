/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define SYM 1
#define NAV 2
#define NUM 3
#define MOUSE 4
#define FN 5
#define UC 6

#include "mouse.dtsi"

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    behaviors {
      hm: homerow_mods {
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "balanced";
          tapping-term-ms = <280>;
          quick-tap-ms = <175>;
          require-prior-idle-ms = <150>;
          bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <30>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <DEF>;
        };

        combo_tab {
            timeout-ms = <30>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
            layers = <DEF>;
        };

        combo_backspace {
            timeout-ms = <30>;
            key-positions = <17 18>;
            bindings = <&kp BACKSPACE>;
            layers = <DEF>;
        };

        combo_copy {
            timeout-ms = <30>;
            key-positions = <22 21>;
            bindings = <&kp LG(C)>;
            layers = <DEF MOUSE>;
        };

        combo_paste {
            timeout-ms = <30>;
            key-positions = <23 22>;
            bindings = <&kp LG(V)>;
            layers = <DEF MOUSE>;
        };

        combo_cut {
            timeout-ms = <30>;
            key-positions = <21 23>;
            bindings = <&kp LG(X)>;
            layers = <DEF MOUSE>;
        };

        combo_capsword {
            timeout-ms = <30>;
            key-positions = <1 2 3>;
            bindings = <&caps_word>;
            layers = <DEF>;
        };

        combo_meh {
            bindings = <&sk LS(LA(LG(LCTRL)))>;
            key-positions = <31 32>;
            layers = <DEF>;
        };
    };

      conditional_layers {
        compatible = "zmk,conditional-layers";

        FN {
            if-layers = <SYM NUM>;
            then-layer = <FN>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

        DEF {
          bindings = <
          &kp Y &kp C &kp L &kp M &kp K                       &kp Z &kp F &kp U &kp COMMA &kp SQT
          &kp I &kp S &kp R &kp T &kp G                       &kp P &kp N &kp E &kp A &kp O
          &kp Q &kp V &kp W &kp D &kp J                       &kp B &kp H &kp SLASH &kp DOT &kp X
                          &lt SYM ESC &lt NAV BACKSPACE       &lt MOUSE SPC &lt NUM ENTER 
          >;
        };

        SYM {
          bindings = <
          &kp GRAVE &kp LT &kp GT &kp EXCL &none                                          &kp AMPS &kp SEMI &kp LBKT &kp RBKT &kp PERCENT
          &hm LCTRL UNDER &hm LALT MINUS &hm LGUI PLUS &hm LSHIFT EQUAL &kp HASH          &kp PIPE &hm RSHIFT COLON &hm RGUI LPAR &hm RALT RPAR &hm RCTRL QMARK
          &kp CARET &kp SLASH &kp ASTRK &kp BSLH &none                                    &kp TILDE &kp DOLLAR &kp LBRC &kp RBRC &kp AT
                          &none &none                                                     &kp SPC &lt NUM ENTER
          >;
        };

        NUM {
          bindings = <
          &none &kp N7 &kp N8 &kp N9 &kp LS(LG(N3)) &kp C_PP                   &none &none &none &none &none 
          &hm LCTRL N0 &hm LALT N4 &hm LGUI N5 &hm LSHIFT N6 &kp LS(LG(N4))    &none &sk RSHIFT &sk RGUI &sk RALT &sk RCTRL
          &none &kp N1 &kp N2 &kp N3 &kp LS(LG(N5))                            &none &kp BACKSPACE &none &none &none
                        &lt SYM N0 &kp BACKSPACE                               &none &none
          >;
        };

    };
};
